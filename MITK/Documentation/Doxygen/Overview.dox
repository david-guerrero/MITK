/**

\page OverviewPage Overview on the Medical Imaging Interaction Toolkit (MITK)
 
Four issues are important for advanced interactive medical imaging software:
\li the data, not only the original images, but also other data like segmentation results, 
surfaces, vessel-trees, etc.,
\li the algorithms to extract information from the data or to generate new data,
\li the visualization of the data, which requires information about the position of the data 
in space and time and 
\li to allow the user to conveniently interact with the data.

Today, there are two major open-source toolkits for visualization and image processing:
\li the <a href="http://www.vtk.org">Visualization Toolkit (VTK)</a>, which provides "a wide variety 
of visualization algorithms including scalar, vector, tensor, texture, and volumetric methods; 
and advanced modeling techniques such as implicit modelling, polygon reduction, mesh smoothing, 
cutting, contouring, and Delaunay triangulation. In addition, dozens of imaging algorithms have 
been directly integrated to allow the user to mix 2D imaging / 3D graphics algorithms and data."
(from the <a href="http://www.vtk.org">vtk homepage</a>).
\li the <a href="http://www.itk.org">Insight Toolkit (ITK)</a>, which provides registration and 
segmentation algorithms.

ITK provides powerful algorithms, but is not designed for visualization or interaction. VTK has 
powerful visualization capabilities, but only low-level support for interaction such as picking 
methods, rotation, movement and scaling of objects. Support for high level interactions with data
as, for example, the interactive construction and modification of deformable models, and 
undo-capabilities is outside the scope of VTK. Furthermore, it is designed to create \em one 
\em kind of view on the data. There is no special assistance to realized multiple, different 
views of the data (as a multiplanar reconstruction and a 3D rendering). Finally, VTK supports only
2D and 3D data, not 3D+t data, which are required for some medical applications, and there is 
currently no convenient possibility to combine VTK with ITK.

The aim of MITK is to use VTK and ITK, allow an easy combination of both and extend them with those 
features, which are outside the scope of both.

\section DesignOverview Design Overview

The basic design concept of MITK is model-view-controller (MVC). Although some people think MVC is 
out-of-date, it is useful in this case (and also we do not really use pure MVC): we have data 
(\em model), on which we want to have different @em views and we want to interact with the data 
(\em controller), which should result in a simultaneous and consistent update of all views.

\li data management classes
\li 
...
 */
