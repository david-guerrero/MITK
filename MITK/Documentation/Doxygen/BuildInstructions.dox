/**
\page BuildInstructionsPage Build Instructions

\section BIZero Introduction

The MITK build system (which is based on CMake) supports a "superbuild" process, meaning that it will download, configure, and build
all required third-party libraries (except Qt) automatically. These instructions will show you how to use the MITK superbuild.

\note This page explains explicitly how to build MITK itself. If you want to create your own project based on MITK, the process
described below is completely automated. Please see http://www.mitk.org/wiki/SetupAMitkBasedProject

For more advanced users, the last sections explain how to inject custom build libraries into the supebuild process.

\section BIOne Prerequisites

You need:
  -# Git from http://git-scm.com (there are also numerous third-party graphical clients available)
  -# <a href="http://www.cmake.org">CMake</a> (version 2.8.4 or higher)
  -# <a href="http://qt.nokia.com">Qt</a> 4.x if you plan to develop Qt-based applications 
  (version 4.5 or above is recommended, we cannot guarantee compatibility with lower versions)
  
\section BITwo Get a source tree

Since MITK is under active development we recommend to use git to get
the most recent version. To make sure you get a stable tree, check the
<a href="http://cdash.mitk.org/index.php?project=MITK">MITK dashboard</a>
before checking out. If the build tree is not clean, you can specify an
older revision for the checkout or get a stable tar ball from
<a href="http://www.mitk.org">www.mitk.org</a>

To clone MITK's current git repository do:

\code
git clone http://git.mitk.org/MITK.git
\endcode

\section BIThree Build MITK with CMake

Create a new directory for the superbuild binary tree, change to it and call CMake:

In the shell (assuming you current directory is the same as the one where you
issued the git clone command):
\code
mkdir MITK-superbuild
cd MITK-superbuild
ccmake ../MITK
\endcode

If you use <B>Windows</B>, then you just start the CMake GUI and enter the location of the source and of the binary tree,
choose a suitable generator and configure the project.

CMake will present you a couple of options, these are the most important ones:

 - <tt><b>MITK_USE_Boost</b></tt> Build MITK code which depends on Boost (this will download Boost 1.45.0)
 - <tt><b>MITK_USE_OpenCV</b></tt> Build MITK code which depends on OpenCV (this will download and build OpenCV 2.2)
 - <tt><b>MITK_USE_QT</b></tt> Build MITK code which depends on Qt
 - <tt><b>QT_QMAKE_EXECUTABLE</b></tt> The path to the qmake executable of your Qt installation
 
If you are satisfied with the configuration of your MITK superbuild, generate the project files with 
CMake by pressing "Generate".

<b>Linux</b> users usually just enter "make" (optionally supplying the number threads to be used for
a parallel build):
\code
make -j4
\endcode

<b>Windows</b> users using Visual Studio can open the generated <tt>MITK-superbuild.sln</tt> solution file
in the <tt>MITK-superbuild</tt> directory and start the build by building the <tt>BUILD_ALL</tt> project.

\section BIFour Customize your MITK superbuild

The MITK superbuild configured MITK with all needed external libraries. The build directories of these libraries,
and of MITK itself are located inside the <tt>MITK-superbuild</tt> directory. For example, the directory layout may
look like:

\code
MITK-superbuild
 |- ITK-build
 |- VTK-build
 |- MITK-build
\endcode

To change the configuration of the MITK build, choose the MITK-build directory as the binary directory in the
CMake GUI. After generating the project files, build the MITK project by either issuing "make" in the MITK-build
directory (Linux), or by opening MITK-build/MITK.sln and building the project with Visual Studio.

You may also change the configuration of any project configured via the superbuild process. Make sure to also build
the changed project and also the projects which depend on it.

\section BIFive Running Applications

On Linux, just execute the application you want to run. MITK executables are located in
<tt>MITK-superbuild/MITK-build/bin</tt>

On Windows, the <tt>PATH</tt> environment variable must contain the directories containging third-party libraries.
The MITK build system generated Windows Batch files in the <tt>MITK-build</tt> directory which set up a correct
environment and opens the appropriate Visual Studio solution file. Use (and maybe modify/enhance) these Batch files
to be able to start and debug MITK applications from inside Visual Studio.

\section BISix Documentation

If you have the <a href="http://www.doxygen.org">Doxygen</a> documentation tool installed, you get a new project
(Visual Studio) or "make" target named "doc". You can build this to generate the HTML documentation of MITK in 
the Documentation/Doxygen directory of your MITK-build binary tree or in the <tt>MITK_DOXYGEN_OUTPUT_DIR</tt> CMake variable
(if specified).

\section BISeven Extend MITK on your own (using the application framework BlueBerry)

\ref NewPluginPage

\section BIEight Use MITK in your own project (as a toolkit)

In the MITK-build binary tree the MITKConfig.cmake file is generated. You can include it in your own project with

FIND_PACKAGE(MITK)

On Windows you also need
FIND_PACKAGE(ITK)
FIND_PACKAGE(VTK)
to get the library dependencies right.

After that you can set your include path with

INCLUDE_DIRECTORIES(${QMITK_INCLUDE_DIRS})

and create an application:

LINK_DIRECTORIES(${MITK_LINK_DIRECTORIES})
ADD_EXECUTABLE(MyApp MyApp.cpp)
TARGET_LINK_LIBRARIES(Step1 ${QMITK_LIBRARIES})

\note IMPORTANT: do not include the ITK_USE_FILE in your project when using MITK. There's a conflict in the ITK
 and MITK tree classes which will be resolved soon. 

\section BINine Superbuild Customization

You can inject pre-build third-party libraries into the MITK superbuild by setting certain CMake variables before
the first configure step. MITK will then use these third-party libraries instead of downloading and building them
itself. Note you must take care to configure those libraries with all options MITK requires.

The following variables are supported:

 - <tt><b>BOOST_ROOT</b></tt> Set this variable to your custom Boost installation
 - <tt><b>CTK_DIR</b></tt> Set this variable to your CTK binary tree (the directory containing the CTKConfig.cmake file)
 - <tt><b>DCMTK_DIR</b></tt> Set this variable to your DCMTK binary tree (the directory containing the DCMTKConfig.cmake file)
 - <tt><b>GDCM_DIR</b></tt> Set this variable to your GDCM binary tree (the directory containing the GDCMConfig.cmake file)
 - <tt><b>ITK_DIR</b></tt> Set this variable to your ITK binary tree (the directory containing the ITKConfig.cmake file)
 - <tt><b>OpenCV_DIR</b></tt> Set this variable to your OpenCV binary tree (the directory containing the OpenCVConfig.cmake file)
 - <tt><b>VTK_DIR</b></tt> Set this variable to your VTK binary tree (the directory containing the VTKConfig.cmake file)
 
To set CMake options before the first configure step is invoked, either supply them on the command line, i.e.

\code
ccmake -DITK_DIR:PATH=/opt/ITK-release ../MITK
\endcode

or add them in the CMake GUI by pressing "Add Entry" (before pressing "Configure" the first time).

See the following link for more information about how to configure third-party libraries:
\ref BuildToolkits "How to build ITK, VTK and QT"

*/
