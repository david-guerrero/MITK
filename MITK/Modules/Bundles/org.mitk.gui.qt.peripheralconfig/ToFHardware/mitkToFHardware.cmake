#option MITK_USE_TOF_HARDWARE

IF(WIN32)
  IF(CMAKE_CL_64)
    SET(_PLATFORM_STRING "W64")
  ELSE(CMAKE_CL_64)
    SET(_PLATFORM_STRING "W32")
  ENDIF(CMAKE_CL_64)
ELSE(WIN32)
  IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
    SET(_PLATFORM_STRING "L64")
  ELSE(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
    SET(_PLATFORM_STRING "L32")
  ENDIF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
ENDIF(WIN32)

OPTION(MITK_ENABLE_TOF_HARDWARE "Support for range cameras" OFF)
IF(MITK_ENABLE_TOF_HARDWARE)
#Begin PMD Camcube hardware
OPTION(MITK_USE_TOF_PMDCAMCUBE "Enable support for PMD camcube" OFF)

# only if PMD Camcube is enabled
IF(MITK_USE_TOF_PMDCAMCUBE)
  FIND_LIBRARY(MITK_PMD_LIB pmdaccess2 DOC "PMD access library.")
  GET_FILENAME_COMPONENT(MITK_PMD_SDK_DIR ${MITK_PMD_LIB} PATH)
  SET(MITK_PMD_SDK_DIR ${MITK_PMD_SDK_DIR}/..)
  FIND_PATH(MITK_PMD_INCLUDE_DIR pmdsdk2.h ${MITK_PMD_SDK_DIR}/include DOC  "Include directory of PMD-SDK.")
  SET(MITK_TOF_PMD_CAMCUBE_SOURCE ${MITK_PMD_SDK_DIR}/plugins/camcube3.${_PLATFORM_STRING}.pap)
  SET(MITK_TOF_PMD_CAMCUBE_PROC ${MITK_PMD_SDK_DIR}/plugins/camcubeproc.${_PLATFORM_STRING}.ppp)
  SET(MITK_TOF_PMD_FILE_SOURCE ${MITK_PMD_SDK_DIR}/plugins/pmdfile.${_PLATFORM_STRING}.pcp)
#  FILE(GLOB MITK_TOF_PMD_CAMCUBE_SOURCE camcube3.${_PLATFORM_STRING}.pap)
#  FILE(GLOB MITK_TOF_PMD_CAMCUBE_PROC camcubeproc.${_PLATFORM_STRING}.ppp)
#  FILE(GLOB MITK_TOF_PMD_FILE_SOURCE pmdfile.${_PLATFORM_STRING}.pcp)
  IF(WIN32)
   MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/bin/pmdaccess2.dll  CONFIGURATIONS Release)
   MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camcube3.W32.pap  CONFIGURATIONS Release)
   MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camcubeproc.W32.ppp  CONFIGURATIONS Release)
   MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camcube3.W64.pap  CONFIGURATIONS Release)
   MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camcubeproc.W64.ppp  CONFIGURATIONS Release)
   MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/pmdfile.W32.pcp  CONFIGURATIONS Release)
  ENDIf(WIN32)
ENDIF(MITK_USE_TOF_PMDCAMCUBE)
#End PMD Camcube Hardware

#Begin PMD CamBoard hardware
OPTION(MITK_USE_TOF_PMDCAMBOARD "Enable support for PMD camboard" OFF)

# only if PMD CamBoard is enabled
IF(MITK_USE_TOF_PMDCAMBOARD)
  FIND_LIBRARY(MITK_PMD_LIB pmdaccess2 DOC "PMD access library.")
  GET_FILENAME_COMPONENT(MITK_PMD_SDK_DIR ${MITK_PMD_LIB} PATH)
  SET(MITK_PMD_SDK_DIR ${MITK_PMD_SDK_DIR}/..)
  FIND_PATH(MITK_PMD_INCLUDE_DIR pmdsdk2.h ${MITK_PMD_SDK_DIR}/include DOC  "Include directory of PMD-SDK.")
  SET(MITK_TOF_PMD_CAMBOARD_SOURCE ${MITK_PMD_SDK_DIR}/plugins/camboard.${_PLATFORM_STRING}.pap)
  SET(MITK_TOF_PMD_CAMBOARD_PROC ${MITK_PMD_SDK_DIR}/plugins/camboardproc.${_PLATFORM_STRING}.ppp)
#  FILE(GLOB MITK_TOF_PMD_CAMBOARD_SOURCE camboard.${_PLATFORM_STRING}.pap)
#  FILE(GLOB MITK_TOF_PMD_CAMBOARD_PROC camboardproc.${_PLATFORM_STRING}.ppp)
#  FILE(GLOB MITK_TOF_PMD_FILE_SOURCE ${MITK_PMD_SDK_DIR}/plugins/pmdfile.${_PLATFORM_STRING}.pcp)
  IF(WIN32)
   INSTALL(FILES ${MITK_PMD_SDK_DIR}/bin/pmdaccess2.dll DESTINATION bin CONFIGURATIONS Release)
   INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camboard.W32.pap DESTINATION bin CONFIGURATIONS Release)
   INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camboardproc.W32.ppp DESTINATION bin CONFIGURATIONS Release)
#   INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camboard.W64.pap DESTINATION bin CONFIGURATIONS Release)
#   INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/camboardproc.W64.ppp DESTINATION bin CONFIGURATIONS Release)
#   INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/pmdfile.W32.pcp DESTINATION bin CONFIGURATIONS Release)
  ENDIf(WIN32)
ENDIF(MITK_USE_TOF_PMDCAMBOARD)
#End PMD Camcube Hardware

IF (WIN32)

#Begin PMD O3 hardware
OPTION(MITK_USE_TOF_PMDO3 "Enable support for PMD O3 camera" OFF)
# only if PMD O3 is enabled
IF(MITK_USE_TOF_PMDO3)
  FIND_LIBRARY(MITK_PMD_LIB pmdaccess2 DOC "PMD access library.")
  GET_FILENAME_COMPONENT(MITK_PMD_SDK_DIR ${MITK_PMD_LIB} PATH)
  SET(MITK_PMD_SDK_DIR ${MITK_PMD_SDK_DIR}/..)
  FIND_PATH(MITK_PMD_INCLUDE_DIR pmdsdk2.h ${MITK_PMD_SDK_DIR}/include DOC  "Include directory of PMD-SDK.")
  SET(MITK_TOF_PMD_O3D_SOURCE ${MITK_PMD_SDK_DIR}/plugins/o3d.${_PLATFORM_STRING}.pcp)
  SET(MITK_TOF_PMD_O3D_PROC ${MITK_PMD_SDK_DIR}/plugins/o3d.${_PLATFORM_STRING}.pcp)
#  FILE(GLOB MITK_TOF_PMD_O3D_SOURCE o3d.${_PLATFORM_STRING}.pcp)
#  FILE(GLOB MITK_TOF_PMD_O3D_PROC o3d.${_PLATFORM_STRING}.pcp)
  MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/bin/pmdaccess2.dll  CONFIGURATIONS Release)
  MITK_INSTALL(FILES ${MITK_PMD_SDK_DIR}/plugins/o3d.W32.pcp  CONFIGURATIONS Release)
ENDIF(MITK_USE_TOF_PMDO3)
#End PMD O3 Hardware
ENDIF(WIN32)
ENDIF(MITK_ENABLE_TOF_HARDWARE)

CONFIGURE_FILE(mitkToFConfig.h.in ${PROJECT_BINARY_DIR}/mitkToFConfig.h @ONLY)

